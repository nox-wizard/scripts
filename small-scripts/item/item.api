// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// || NoX-Wizard	: Embedded Small Scripts			||
// || Maintained by	: Luxor, Sparhawk				||
// || Last Update	: 06-apr-2003					||
// || Designed for NXW 	: 0.82						||
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#if defined _nxw_item_api_
  #endinput
#endif
#define _nxw_item_api_

/*!
\name getItemTarget(
\author Xanathar
\syntax getItemTarget()
\brief Gets the targetted item
*/
native getItemTarget();


/*!
\name getItemFromSerial
\author Luxor
\syntax getItemFromSerial(const serial)
\param serial: the serial
\brief Gets the item of the given serial
*/
native getItemFromSerial(const serial);

/*!
\name getItemFromSerial
\author Xanathar
\syntax getItemFromSerial(const chr)
\param chr: the character
\brief Gets the socket of the given char
*/
native getSocketFromChar(const chr);
/*!
\name itm_getProperty
\author Xanathar
\syntax itm_getProperty(const item, const property, const subprop=0, ...)
\brief
*/
native itm_getProperty(const item, const property, const subprop=0, ...);

/*!
\name itm_setProperty
\author Xanathar
\syntax itm_setProperty(const item, const property, const subprop=0, ...)
\brief
*/
native itm_setProperty(const item, const property, const subprop=0, ...);

/*!
\name itm_contAddItem
\author Xanathar
\syntax itm_contAddItem(const container, const item, const x, const y)
\brief
*/
native itm_contAddItem(const container, const item, const x, const y);

/*!
\name itm_color
\author Xanathar
\syntax itm_color(const item)
\brief
*/
native itm_color(const item);

/*!
\name itm_contPileItem
\author Xanathar
\syntax itm_contPileItem(const container, const item)
\brief
*/
native itm_contPileItem(const container, const item);

/*!
\name itm_contCountItems
\author Xanathar
\syntax itm_contCountItems(const container, const id, const color = -1)
\brief
*/
native itm_contCountItems(const container, const id, const color = -1);

/*!
\name itm_countItemsByID
\author Keldan
\syntax itm_countItemsByID(const container, const ScriptID)
\brief return amount of items identified by ScriptID
*/
native itm_countItemsByID(const container, const ScriptID);

/*!
\name itm_contDelAmount
\author Xanathar
\syntax itm_contDelAmount(const container, const amount, const id, const color = -1)
\brief
*/
native itm_contDelAmount(const container, const amount, const id, const color = -1);

/*!
\name itm_delAmountByID
\author Keldan
\syntax itm_delAmountByID(const container, const amount, const ScriptID)
\brief remove from container "amount" number of items, identified by ScriptID
*/
native itm_delAmountByID(const container, const amount, const ScriptID);

/*!
\name itm_moveTo
\author Xanathar
\syntax itm_moveTo(const item, const x, const y, const z)
\brief
*/
native itm_moveTo(const item, const x, const y, const z);

/*!
\name itm_pileItem
\author Xanathar
\syntax itm_pileItem(const container, const item)
\brief
*/
native itm_pileItem(const container, const item);

/*!
\name itm_reduceAmount
\author Xanathar
\syntax itm_reduceAmount(const item, const amount)
\brief
*/
native itm_reduceAmount(const item, const amount);

/*!
\name itm_setContSerial
\author Xanathar
\syntax itm_setContSerial(const item, const serial)
\brief
*/
native itm_setContSerial(const item, const serial);

/*!
\name itm_setContSerOnly
\author Xanathar
\syntax itm_setContSerOnly(const item, const serial)
\brief
*/
native itm_setContSerOnly(const item, const serial);

/*!
\name itm_setMultiSerial
\author Xanathar
\syntax itm_setMultiSerial(const item, const serial)
\brief
*/
native itm_setMultiSerial(const item, const serial);

/*!
\name itm_setOwnSerial
\author Xanathar
\syntax itm_setOwnSerial(const item, const serial)
\brief
*/
native itm_setOwnSerial(const item, const serial);

/*!
\name itm_setOwnSerOnly
\author Xanathar
\syntax itm_setOwnSerOnly(const item, const serial)
\brief
*/
native itm_setOwnSerOnly(const item, const serial);

/*!
\name itm_setSerial
\author Xanathar
\syntax itm_setSerial(const item, const serial)
\brief
*/
native itm_setSerial(const item, const serial);

/*!
\name itm_spawnBackpack
\author Xanathar
\syntax itm_spawnBackpack(const socket, const itemid)
\brief
*/
native itm_spawnBackpack(const socket, const itemid);

/*!
\name itm_getCharBackPack
\author Xanathar
\syntax itm_getCharBackPack(const chr)
\brief
*/
native itm_getCharBackPack(const chr);

/*!
\name itm_create
\author Xanathar
\syntax itm_create(const itemtype)
\brief
*/
native itm_create(const itemtype);

/*!
\name itm_spawnBank
\author Xanathar
\syntax itm_spawnBank(const socket, const itemid)
\brief
*/
native itm_spawnBank(const socket, const itemid);

/*!
\name itm_checkDecay
\author Xanathar
\syntax itm_checkDecay(const item)
\brief
*/
native itm_checkDecay(const itm);

/*!
\name itm_remove
\author Xanathar
\syntax itm_remove(const item)
\brief
*/
native itm_remove(const itm);

/*!
\name itm_getEventHandler
\author Sparhawk
\syntax itm_getEventHandler(const chr, const event, handler[])
\param itm:	item serial
\param event:	item event identifier (EVENT_ITM_ON*)
\brief Returns name of small function bound to the specified event into handler
*/
native itm_getEventHandler(const chr, const event, handler[]);

/*!
\name itm_setEventHandler
\author Xanathar
\syntax itm_setEventHandler(const itm, const event, const evtype, const format[], ...)
\param itm:	item serial
\param event:	item event identifier (EVENT_ITM_ON*)
\param evtype:	sets dynamic or static event type (EVENTTYPE_STATIC or EVENTTYPE_DYNAMIC). Static events will be saved in worldfile.
\param format:	Name of small function to bind to the event
\brief Binds small function name to the specified event.
*/
native itm_setEventHandler(const itm, const event, const evtype, const format[], ...);

/*!
\name itm_delEventHandler
\author Xanathar
\syntax itm_delEventHandler(const item, const event)
\param itm:	item serial
\param event:	item event identifier (EVENT_ITM_ON*)
\brief Unbinds link between small function an item event
*/
native itm_delEventHandler(const itm, const event);

/*!
\name itm_sound
\author Xanathar
\syntax itm_sound(const item, const soundfx)
\brief
*/
native itm_sound(const itm, const soundfx);

/*!
\name itm_spawnItem
\author Luxor
\syntax itm_spawnItem(const s, const chr, const amount, const format[], const stackable, const cItemId1, const cItemId2, const cColorId1, const cColorId2, const pack, const send)
\brief
*/
native itm_spawnItem(const s, const chr, const amount, const format[], const stackable, const cItemId1, const cItemId2, const cColorId1, const cColorId2, const pack, const send);

/*!
\name itm_spawnNecroItem
\author Luxor
\syntax itm_spawnNecroItem(const s, const inPack, const format[])
\brief
*/
native itm_spawnNecroItem(const s, const inPack, const format[]);

/*!
\name itm_refresh
\author Luxor
\syntax itm_refresh(const item)
\brief
*/
native itm_refresh(const itm);

/*!
\name itm_speech
\author Anthalir
\syntax itm_speech(const s, const itm, const text[])
\brief
*/
native itm_speech(const s, const itm, const text[]);

/*!
\name itm_equip
\author Anthalir
\syntax itm_equip(const chr, const item)
\brief
*/
native itm_equip(const chr, const item);

/*!
\name itm_bounceToPack
\author Anthalir
\syntax itm_bounceToPack(const s, const item)
\brief
*/
native itm_BounceToPack(const s, const item);

/*!
\name itm_getLocalVarErr
\author Sparhawk
\syntax itm_getLocalVarErr()
\brief Returns result for all operations on item variables
\brief Returned value is one of VAR_ERROR_NONE, VAR_ERROR_UNKNOWN_VAR, VAR_ERROR_DUPLICATE_VAR, VAR_ERROR_WRONG_TYPE, VAR_ERROR_ACCESS_DENIED
*/
native itm_getLocalVarErr();

/*!
\name itm_isaLocalVar
\author Sparhawk
\syntax itm_isaLocalVar(const item, const var, const type = 0)
\param item:	item serial
\param var:	variable identifier
\param type:	type of variable (VAR_TYPE_ANY, VAR_TYPE_INTEGER, VAR_TYPE_STRING )
\brief Returns true when variable exists for item. Can also be used to check wether variable is of a specific type
*/
native itm_isaLocalVar( const item, const var, const type = 0 );

/*!
\name itm_delLocalVar
\author Sparhawk
\syntax itm_delLocalVar(const item, const var, const type = 0)
\param item:	item serial
\param var:	variable identifier
\param type:	type of variable (VAR_TYPE_ANY, VAR_TYPE_INTEGER, VAR_TYPE_STRING )
\brief Deletes item variable. When type is not VAR_TYPE_ANY variable is only deleted if of same type as specified.
*/
native itm_delLocalVar( const item, const var, const type = 0 );

/*!
\name itm_addLocalIntVar
\author Sparhawk
\syntax itm_addLocalIntVar(const item, const var, const value = 0)
\param item:	item serial
\param var:	variable identifier
\param value:	initial value
\brief Adds a new integer variable to the item
*/
native itm_addLocalIntVar( const item, const var, const value = 0 );

/*!
\name itm_getLocalIntVar
\author Sparhawk
\syntax itm_getLocalIntVar(const item, const var)
\param item:	item serial
\param var:	variable identifier
\brief Get value of specified integer variable from item.
*/
native itm_getLocalIntVar( const itm, const var );

/*!
\name itm_setLocalIntVar
\author Sparhawk
\syntax itm_setLocalIntVar(const item, const var, const value = 0)
\param item:	item serial
\param var:	variable identifier
\param value:	new value
\brief Set the value of specified integer variable for the item
*/
native itm_setLocalIntVar( const itm, const var, const value = 0 );

/*!
\name itm_addLocalStrVar
\author Sparhawk
\syntax itm_addLocalStrVar(const item, const var, const value[] = "")
\param item:	item serial
\param var:	variable identifier
\param value:	initial value
\brief Adds a new string variable to the item
*/
native itm_addLocalStrVar( const item, const var, const value[] = "" );

/*!
\name itm_getLocalStrVar
\author Sparhawk
\syntax itm_getLocalStrVar(const item, const var, value[])
\param item:	item serial
\param var:	variable identifier
\brief Get value of specified string variable from item into value.
*/
native itm_getLocalStrVar( const item, const var, value[] );

/*!
\name itm_setLocalStrVar
\author Sparhawk
\syntax itm_setLocalStrVar(const item, const var, const value[] = "")
\param item:	item serial
\param var:	variable identifier
\param value:	new value
\brief Set the value of specified string variable for the item
*/
native itm_setLocalStrVar( const item, const var, const value[] = "" );

/*!
\name itm_countLocalVar
\author Sparhawk
\syntax itm_countLocalVar(const item)
\param item:	item serial
\return number of variables defined
\brief Count the number of local variables defined for specified item
*/
native itm_countLocalVar( const item );

/*!
\name itm_firstLocalVar
\author Sparhawk
\syntax itm_firstLocalVar(const item)
\param item:	item serial
\return first defined local variable or INVALID
\brief get id of first defined local variable
*/
native itm_firstLocalVar( const item );

/*!
\name itm_nextLocalVar
\author Sparhawk
\syntax itm_nextLocalVar(const item, const previous)
\param item:	item serial
\param previous: variable id of previous variable
\return next defined local variable or INVALID
\brief get id of next defined local variable
*/
native itm_nextLocalVar( const item, const previous );

/*!
\name itm_getCombatSkill
\author Luxor
\syntax itm_getCombatSkill(const itm)
\brief
*/
native itm_getCombatSkill(const itm);
