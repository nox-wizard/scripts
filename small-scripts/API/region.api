// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// || NoX-Wizard	: Embedded Small Scripts			||
// || Maintained by	: Luxor, Sparhawk				||
// || Last Update	: 06-apr-2003					||
// || Designed for NXW 	: 0.82						||
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#if defined _nxw_region_api_
  #endinput
#endif
#define _nxw_region_api_

/** \defgroup script_API_reg Region
 *  \ingroup script_API
 *  @{
 */

/*!
\author Xanathar
\fn rgn_setWeather(const region, const weathertype = 0)
\brief
*/
native rgn_setWeather(const region, const weathertype = 0);

/*!
\author Xanathar
\fn rgn_getWeather(const region)
\brief
*/
native rgn_getWeather(const region);

/*!
\author Xanathar
\fn rgn_isGuarded(const region)
\brief
*/
native rgn_isGuarded(const region);

/*!
\author Xanathar
\fn rgn_canMark(const region)
\brief
*/
native rgn_canMark(const region);

/*!
\author Xanathar
\fn rgn_canGate(const region)
\brief
*/
native rgn_canGate(const region);

/*!
\author Xanathar
\fn rgn_canRecall(const region)
\brief
*/
native rgn_canRecall(const region);

/*!
\author Xanathar
\fn rgn_noMagicDamage(const region)
\brief
*/
native rgn_noMagicDamage(const region);

/*!
\author Sparhawk
\fn rgn_setGuarded(const region, const trueOrFalse = 1)
\brief
*/
native rgn_setGuarded(const region, const trueOrFalse = 1);

/*!
\author Sparhawk
\fn rgn_setMark(const region, const trueOrFalse = 1)
\brief
*/
native rgn_setMark(const region, const trueOrFalse = 1);

/*!
\author Sparhawk
\fn rgn_setGate(const region, const trueOrFalse = 1)
\brief
*/
native rgn_setGate(const region, const trueOrFalse = 1);

/*!
\author Sparhawk
\fn rgn_setRecall(const region, const trueOrFalse = 1)
\brief
*/
native rgn_setRecall(const region, const trueOrFalse = 1);

/*!
\author Sparhawk
\fn rgn_setMagicDamage(const region, const trueOrFalse = 1)
\brief
*/
native rgn_setMagicDamage(const region, const trueOrFalse = 1);

/*!
\author Sparhawk
\fn rgn_isValid(const region)
\brief
*/
native rgn_isValid(const region);

/*!
\author Sparhawk
\fn rgn_getName(const region, regionName[])
\brief
*/
native rgn_getName(const region, regionName[]);

/*!
\author Wintermute
\fn rgn_getRegion(const x, const y)
\brief returns internal region number at koordinates x,y
*/
native rgn_getRegion(const x, const y);

/*!
\author Wintermute
\fn rgn_respawn(const region, const spawnWhat, const amount = 0)
\param 1 the region
\param 2 enum value SPAWN_AMOUNT,	SPAWN_RANDOM or	SPAWN_MAX (fixed amount, random amount, spawn to the max
\brief respawns dynamic and static spawns in a given region
*/
native rgn_respawn(const region, const spawnWhat, const amount = 0);

/*!
\author Wintermute
\fn rgn_clearSpawn(const region, const spawntype);
\param 1 the region
\param 2 enum value SPAWN_ALL, SPAWN_DYNAMIC, SPAWN_STATIC
\brief clears the given spawn type in a region
*/
native rgn_clearSpawn(const region, const spawntype);

/*!
\author Wintermute
\fn rgn_respawnRegion ( const region, const amount)
\param 1 the region
\param 2 the amount how often region spawning should be triggered
\brief respawns dynamic and static spawns in a given region with the given amount (may vary a bit depending on spawn settings of region)
*/
stock rgn_respawnRegion ( const region, const amount)
{
	rgn_respawn( region, SPAWN_AMOUNT, amount);
}

/*!
\author Wintermute
\fn rgn_respawnRegionRandom ( const region)
\param 1 the region
\brief respawns dynamic and static spawns in a given region with a random amount of spawn trigger calls
*/

stock rgn_respawnRegionRandom ( const region)
{
	rgn_respawn( region, SPAWN_RANDOM);
}

/*!
\author Wintermute
\fn rgn_respawnRegionMax ( const region)
\param 1 the region
\brief respawns dynamic and static spawns in a given region until they are spawned to the max
*/

stock rgn_respawnRegionMax ( const region)
{
	rgn_respawn( region, SPAWN_MAX);
}

/*!
\author Wintermute
\fn rgn_respawnAll ( )
\brief respawns all dynamic and static spawns in every region 
*/

stock rgn_respawnAll ( )
{
	for (new i=0;i<256;i++)
	{	
		rgn_respawn( i, 1);
	}
}

/*!
\author Wintermute
\fn rgn_respawnAllRandom()
\brief respawns all dynamic and static spawns in every region with a random amount of spawn invocations
*/

stock rgn_respawnAllRandom ( )
{
	for (new i=0;i<256;i++)
	{	
		rgn_respawn( i, SPAWN_RANDOM);
	}
}

/*!
\author Wintermute
\fn rgn_respawnAllMax()
\brief respawns all dynamic and static spawns in every region to the max
*/


stock rgn_respawnAllMax ( )
{
	for (new i=0;i<256;i++)
	{	
		rgn_respawn( i, SPAWN_MAX );
	}
}


/** @} */ // end of script_API_reg
