// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// || NoX-Wizard	: Embedded Small Scripts			||
// || Maintained by	: Luxor, Sparhawk				||
// || Last Update	: 06-apr-2003					||
// || Designed for NXW 	: 0.82						||
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#if defined _nxw_misc_api_
  #endinput
#endif
#define _nxw_misc_api_

/*!
\author Xanathar
\fn bypass()
\brief Bypasses default server behaviour
*/
native bypass();

/*!
\author Xanathar
\fn setWindowTitle(const format[], ...)
\brief Sets the window title
*/
native setWindowTitle(const format[], ...);

/*!
\author Xanathar
\fn getFrameStatus()
\brief Gets the current frame status
*/
native getFrameStatus();


/*!
\author Xanathar
\fn getNXWVersion()
\brief Gets the NoX-Wizard engine version
*/
native getNXWVersion();

/*!
\author Xanathar
\fn getNXWVersionType()
\brief
*/
native getNXWVersionType();

/*!
\author Xanathar
\fn getNXWPlatform()
\brief Gets the platform which NoX-Wizard is running on
*/
native getNXWPlatform();

/*!
\author Xanathar
\fn cfgServerOption(const format[], ...)
\param format[]: the CFG command to be executed
\brief Performs a CFG command configuring a server.scp entry
*/
native cfgServerOption(const format[], ...);

/*!
\author Luxor
\fn weblaunch(const socket,const format[], ...)
\param socket: the socket
\param format[]: the URL to be opened by the web client
\brief Sends a request to the given socket to launch its web client
*/
native weblaunch(const socket,const format[], ...);

/*!
\author Luxor
\fn broadcast(const format[], ...)
\param format[]: the message to broadcast
\brief Sends a broadcast message
*/
native broadcast(const format[], ...);

/*!
\author Endymion, changed by Wintermute
\fn getIntFromDefine(const define[], const checkDefine = true)
\param define[]: the define
\param checkDefine: true if a logmessage should be displayed in the console if the define is not available
\brief Get define Number
*/
native getIntFromDefine(const define[],  checkDefine=true);

/*!
\author stonedz
\fn world_save()
\brief performs a worldsave
*/
native world_save();


/*!
\author Stonedz
\fn setLightLevel(const level)
\param level: light level
\since 0.82
\brief sets world's light level

light level is 0 (brightest) to 15 (darkest), -1 enables day/night cycle
\return nothing
*/
native setLightLevel(const level);

native recompileSmall();

/*!
\author Stonedz
\fn reload_accounts()
\since 0.82
\brief reloads accounts

reloads accounts.cfg file and prints an info message in console but none in the client, this should be easily odne in small.
\return nothing
*/
native reload_accounts();


/*!
\author Stonedz
\fn reload_scripts()
\since 0.82
\brief reloads scripts

reloads XSS scripts and prints an info message in console but none in the client, this should be easily odne in small.
\return nothing
*/
native reload_scripts();


/*!
\author Stonedz
\fn reload_commands()
\since 0.82
\brief reloads commands
reloads command.txt directives into command Map and prints a message
into console but none in the client.
\return nothing
*/
native reload_commands();

/*!
\author Stonedz
\fn shutdown(seconds, optional_message[]="")
\param seconds: shutdown delay
\param message[]: optional message
\since 0.82
\brief shuts down the server

shuts down the server in "seconds" seconds and prints a custom message
"The server will shutdown in X minutes and Y seconds." in client and console,
if seconds==0 any prvious shoutdown procedure will be stopped and a
custom message will be print in client and in console.
If optional_message is specified after the custom message will be
printed in client the replacing the standard one.

\return nothing
*/
native shutdown(seconds, optional_message[]="");

/*!
\author Stonedz
\fn setSecondsPerUoMinute(seconds)
\param seconds: number of seconds
\since 0.82
\brief sets ingame time speed
sets the real seconds for UO minutes,
this value will be saved on server.cfg at first save.
\return nothing
*/
native setSecondsPerUoMinute(seconds);

/*!
\author Stonedz
\fn garbageCollection()
\since 0.82
\brief perform garbage collection and prints a message in console.
\return nothing
*/
native garbageCollection();

/*!
\author Wintermute
\fn loaddefaults()
\since 0.82
\brief load serverdefaults
\return nothing
*/
//native loaddefaults();

/*!
\author Wintermute
\fn pdump()
\since 0.82
\brief dump to the calling char the current performance statistics
\return nothing
*/
native pdump(const chr);
