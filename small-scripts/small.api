/*! \page p_small Small
* \section small The Small language
* Much of the NOX wizard's high flexibility comes from its powerful scripting language: Small.
The Small language is not a NOX specific language, it's a scripting language developed to easily
extend applications, without needing particular programming skills. You can learn all about Small
downloading the reference manual from the official site: <A HREF="http://www.compuphase.com/small.htm"> http://www.compuphase.com/small.htm </A>
<br>
The Small language is designed to be simple and fast, and it really is!
An experienced C programmer will master Small in an afternoon due to his similarity with C,
If you are a beginner C programmer, still scared by pointers and references, fear not, Small
doesn't have all such difficult things.
If you come from other scripting languages, you will get familiar with the sintax in a few days of practice.
If you are not a programmer and you see a programming language for the first time, you will find here 
a lot of tutorials that will help you.

\subsection API_reference API reference
* <UL>
* <LI> \ref script_API
* </UL>
\subsection NOX_small NOX-Small scripting guide
* <UL>
* <LI> \ref override
* </UL>

*/
/*
\subsection tutorials Tutorials and examples
* By type with tutorial:
* <UL>
* <LI> \ref p_set
* <LI> \ref p_dinamic_var
* </UL>
*
*/

/*! \page p_dinamic_var Variabili Dinamiche
* \section dinamin_var Variabili Dinamiche
*  
*  Come avere infinite variaibli a disposizione
*  
*  
*  
*/


//============================================================================================
//=======================  OVERRIDES, CALLBACKS AND EVENT HANDLERS  ==========================
//============================================================================================

/*! \page override Overrides,events and callbacks
Overrides, callbacks and event handlers are the way we can run our Small scripts, so this is
the core of NOX scripting

<H4j>CALLBACKS</H4> 
A callback is a public small function that is called by the emulator.
You can declare/implement the function where you want, but it must be public, or the emulator
won't see it. 
Since the function is called by the source code, you don't have control on the parameters passed to it, so the prototype of a callback is determined and depends on the use of the callback. 
Every NOX feature that requires callbacks will provide the prototype to be used. 

<H4>OVERRIDES</H4> 
overrides are declared in override.scp and are used to execute custom code wich will extend or bypass the standard source code. 
If you open override.scp you will see there are some sections, identified by [name]. 
The only sections you have to worry about are: 

<UL>
<LI>[skilltargets] 
<LI>[skills] 
<LI>[special] 
<LI>[speech] 
</UL>
other sections are either unused or there is a bettere way to call your script (with event handlers for example) 

In these sections you will put some code to tell the emulator what script must be called and when. 

<B>modes</B><br> 
Ther are 4 "modes" to call a script: 
<UL>BEFORE: you script is called before the standard source code is executed 
<LI>AFTER: the script is called after the source code 
<LI>BYPASS: the script is called instead of the source code 
<LI>FRAME: the scipt is called both before and after the source code 
</UL>

<B>Callback prototypes</B><br> 
Your callback will be passed the socket of the character who triggered the override, so the function protoype must be: 

\code
public myfunction(const socket)
\endcode

<H4>sections usage and syntax</H4><br> 
Now let's analyze each section to see how you can use it 

<B>section [skilltargets]</B><br> 

in this section you can specify a public function that will be called when the char is targeting something after a skill use (i.e.: anatomy, armslore ecc..) 
the syntax is: 
<skillnumber> 
code<function name>,<mode> 

<skillnumber> is the number associated with skill, you will find it in small-scripts/skills/constant.sma 

<function name> is the name of the public function you want to be called 
<mode> is one of the modes explained previously 

example: 
\code
4=myArmsloreFunction,BYPASS  //this will bypass the standard armslore code with your code 
\endcode 


<B>section [skills]</B><br> 
here your specified function will be called when the charactere uses a skill 
the syntax is the same as for [skilltargets] 

<B>section [special]</B><br> 
here you can use some special overrides with the following syntax:
\code 
<overridetype>=<function>,<mode> 
\endcode

<overridetype> is one of the following: 
OnStart: fired on server startup, available only as AFTER 
OnLoop: fired on each server cycle, available only as AFTER 
StartChar: fired on character startup, available only as AFTER 
OnExit: fired on clean server shutdown, available only as AFTER 

<B>section [speech]</B><br> 
with this override you can execute a script when a character spells a word, the syntax is: 
<word>=<function>,BEFORE 

if in the char speech there is the <word>, your function will be called. 

<H4>EVENT HANDLERS</H4> 
Event handler allow you to to extend or bypass the source code in a number of locations, they are a bit more complex to use than overrides, but they are very much more powerful! 
The concept is that callback will be called when an event happens, an event can be a double click, a character passing on an object, a charcter being attaccked by another and so on, for each of these events you can link to a character or an item a callback with your script, so the main difference with overrides is that event handlers are "personal", they are related to a single object (char or item). 

how to link an event handler to an object 
there are several ways to link an event to an object, wich way is the best one depends on the situation, you can link the event in: 
   - XSS definitions 
   - SECTION NEWBIE 
   - small code 


<B>XSS definition linking</B><br> 
in the XSS definition of an item or character put a line with the following syntax: 
<event> <callback> 

<event> is one of the available event handlers (like @ONDBLCLICK, @ONDEATH) see the file small-scripts/events/constants.sma for the available events 
<callback> is the name of the callback 

example: 
\code
SECTION ITEM $item_anvil_1 
{ 
    ID 0FB0 
    @ONDBLCLICK __blacksmith  //this will call function __blacksmith when the anvil is double clicked 
} 
\endcode 


linking an event handler this way will cause EVERY object created with that script to have the event linked, so in this example every anvil created with that script will call __blacksmith when double clicked 

<B>SECTION NEWBIE linking</B><br> 
in section newbie you can link an avent handler to ALL the new playng characters, this event will be linked to all chars (not NPCs) when they are created, simply add a line similar to the "XSS definition linking" syntax in SECTION NEWBIE in newbie.xss 

<B>Small code linking</B><br> 
You can link an event handler to an object at runtime using the following functions in your small code:<br> 
   - chr_setEventHandler(const chr, const event, const evtype, const format[],...) 
   - itm_setEventHandler(const itm, const event, const evtype, const format[], ...) 

chr, itm: is the serial of char or item the event will be linked to<br> 
event: is the event to link (@ONWALKOVER, @ONKILL ecc..)<br> 
evtype: is type of the event, can be EVENTTYPE_DYNAMIC or EVENTTYPE_STATIC, the first type of events won't be save in worldsaves, the second will be saved.<br> 
format: is the name of the callback function that will be called when the event is triggered, supports C-like syntax for the format string.<br> 

when you link an event this way the event is linked ONLY to the object (item or char) you passed to the function. 

You can get the callback name of an event handler linked to an object with:<br> 
   - chr_getEventHandler(const chr, const event, handler[]) 
   - itm_getEventHandler(const itm,const event, handler[]) 

chr, itm: is the serial of char or item the event is linked to<br> 
event: the event <br>
handler: a string in wich will be stored the name of the callback<br> 

You can delete an event from an object with:<br> 
   - chr_delEventHandler(const chr, const event) 
   - itm_delEventHandler(const itm, const event)

<B>callback proptotypes</B><br> 
the callback prototype is different for each event, you will finde most of the event descriptions and callback prototypes in the "small scripting guide" in the NOX site's help page. 
Usually you can omit some parameters from the callback definition if you know you won't use them, but you can omit only the last parameters. 
I think omitting parameters is not a good practice because it can easily lead to errors, but if necessary you know you can. 

<B>bypassing</B><br> 
With function bypass() you can tell the emulator not to execute his source code, this way your callback's code will take place of the source code. 
Bypassing source code is a very powerful feature, but it's dangerous too, if you don't know the server standard behaviour you might cause errors or other problems. 
Usually there are no problems in bypassing, as event handlers are designed to allow bypassing and all vital chacks are usually done before your callback is called, but if you can, always take a look at the source code the first time you bypass an event, of course not all can easily read C++ code so no problem if you can't, but many times is very useful to understand what you can do. 
*/