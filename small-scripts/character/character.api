// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// || NoX-Wizard	: Embedded Small Scripts			||
// || Maintained by	: Luxor, Sparhawk				||
// || Last Update	: 06-apr-2003					||
// || Designed for NXW 	: 0.82						||
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#if defined _nxw_character_api_
  #endinput
#endif
#define _nxw_character_api_

/*!
\author Xanathar
\fn getCharFromSerial(const serial)
\param serial: the serial
\brief Gets the char of the given serial
*/
native getCharFromSerial(const serial);

/*!
\author Xanathar
\fn getCharTarget()
\brief Gets the targetted char
*/
native getCharTarget();

/*!
\author Xanathar
\fn chr_getProperty(const chr, const property, const subprop=0, ...)
\brief
*/
native chr_getProperty(const chr, const property, const subprop=0, ...);

/*!
\author Xanathar
\fn chr_setProperty(const chr, const property, const subprop=0, ...)
\brief
*/
native chr_setProperty(const chr, const property, const subprop=0, ...);

/*!
\author Xanathar
\fn chr_canBroadcast(const chr)
\brief
*/
native chr_canBroadcast(const chr);

/*!
\author Xanathar
\fn chr_canSeeSerials(const chr)
\brief
*/
native chr_canSeeSerials(const chr);

/*!
\author Xanathar
\fn chr_canSnoop(const chr)
\brief
*/
native chr_canSnoop(const chr);

/*!
\author Xanathar
\fn chr_countBankGold(const chr)
\brief
*/
native chr_countBankGold(const chr);

/*!
\author Xanathar
\fn chr_countGold(const chr)
\brief
*/
native chr_countGold(const chr);

/*!
\author Xanathar
\fn chr_countItems(const chr, const itemtype, const color = -1)
\brief
*/
native chr_countItems(const chr, const itemtype, const color = -1);

/*!
\author Xanathar
\fn chr_disturbMed(const chr)
\brief
*/
native chr_disturbMed(const chr);

/*!
\author Xanathar
\fn chr_getBankBox(const chr, const bankboxtype)
\brief
*/
native chr_getBankBox(const chr, const bankboxtype);

/*!
\author Xanathar
\fn chr_getItemOnLayer(const chr, const layer)
\brief
*/
native chr_getItemOnLayer(const chr, const layer);

/*!
\author Xanathar
\fn chr_getPriv(const chr)
\brief
*/
native chr_getPriv(const chr);

/*!
\author Xanathar
\fn chr_getShield(const chr)
\brief
*/
native chr_getShield(const chr);

/*!
\author Xanathar
\fn chr_getWeapon(const chr)
\brief
*/
native chr_getWeapon(const chr);

/*!
\author Xanathar
\fn chr_isCounselor(const chr)
\brief
*/
native chr_isCounselor(const chr);

/*!
\author Xanathar
\fn chr_isCriminal(const chr)
\brief
*/
native chr_isCriminal(const chr);

/*!
\author Xanathar
\fn chr_isGM(const chr)
\brief
*/
native chr_isGM(const chr);

/*!
\author Xanathar
\fn chr_isGMorCns(const chr)
\brief
*/
native chr_isGMorCns(const chr);

/*!
\author Xanathar
\fn chr_isGrey(const chr)
\brief
*/
native chr_isGrey(const chr);

/*!
\author Xanathar
\fn chr_isHuman(const chr)
\brief
*/
native chr_isHuman(const chr);

/*!
\author Xanathar
\fn chr_isInnocent(const chr)
\brief
*/
native chr_isInnocent(const chr);

/*!
\author Xanathar
\fn chr_isInvul(const chr)
\brief
*/
native chr_isInvul(const chr);

/*!
\author Xanathar
\fn chr_isMurderer(const chr)
\brief
*/
native chr_isMurderer(const chr);

/*!
\author Xanathar
\fn chr_isTrueGM(const chr)
\brief
*/
native chr_isTrueGM(const chr);

/*!
\author Xanathar
\fn chr_makeInvul(const chr)
\brief
*/
native chr_makeInvul(const chr);

/*!
\author Xanathar
\fn chr_makeVulnerable(const chr)
\brief
*/
native chr_makeVulnerable(const chr);

/*!
\author Xanathar
\fn chr_moveTo(const chr, const x, const y, const z)
\brief
*/
native chr_moveTo(const chr, const x, const y, const z);

/*!
\author Xanathar
\fn chr_setCriminal(const chr)
\brief
*/
native chr_setCriminal(const chr);

/*!
\author Xanathar
\fn chr_setGrey(const chr)
\brief
*/
native chr_setGrey(const chr);

/*!
\author Xanathar
\fn chr_setPermaGrey(const chr)
\brief
*/
native chr_setPermaGrey(const chr);

/*!
\author Xanathar
\fn chr_setInnocent(const chr)
\brief
*/
native chr_setInnocent(const chr);

/*!
\author Xanathar
\fn chr_setMurderer(const chr)
\brief
*/
native chr_setMurderer(const chr);

/*!
\author Xanathar
\fn chr_setPriv(const chr, const priv)
\brief
*/
native chr_setPriv(const chr, const priv);

/*!
\author Xanathar
\fn chr_unhide(const chr)
\brief
*/
native chr_unhide(const chr);

/*!
\author Xanathar
\fn chr_setMultiSerial(const chr, const serial)
\brief
*/
native chr_setMultiSerial(const chr, const serial);

/*!
\author Xanathar
\fn chr_setOwnSerial(const chr, const serial)
\brief
*/
native chr_setOwnSerial(const chr, const serial);

/*!
\author Xanathar
\fn chr_setOwnSerOnly(const chr, const serial)
\brief
*/
native chr_setOwnSerOnly(const chr, const serial);

/*!
\author Xanathar
\fn chr_checkEquipment(const chr)
\brief
*/
native chr_checkEquipment(const chr);

/*!
\author Xanathar
\fn chr_spawnIteminBank(const chr, const itemid)
\brief
*/
native chr_spawnIteminBank(const chr, const itemid);

/*!
\author Xanathar
\fn chr_addNPC(const npcnum, const x, const y, const z)
\brief
*/
native chr_addNPC(const npcnum, const x, const y, const z);

/*!
\author Xanathar
\fn chr_remove(const chr)
\brief
*/
native chr_remove(const chr);

/*!
\author Xanathar
\fn chr_calcAtt(const chr)
\brief
*/
native chr_calcAtt (const chr);

/*!
\author Xanathar
\fn chr_calcDef(const chr)
\brief
*/
native chr_calcDef (const chr);

/*!
\author Xanathar
\fn chr_fish(const chr)
\brief
*/
native chr_fish (const chr);

/*!
\author Sparhawk
\since 0.82.rc3
\fn chr_getGuild( const chr )
\brief Get guild serial for new guild system
*/
native chr_getGuild( const chr );


/*!
\author Xanathar
\fn chr_guildCompare(const chr1, const chr2)
\brief
*/
native chr_guildCompare (const chr1, const chr2);

/*!
\author Xanathar
\fn chr_attackStuff(const chr_defender, const socket_attacker)
\brief
*/
native chr_attackStuff (const chr_defender, const socket_attacker);

/*!
\author Xanathar
\fn chr_helpStuff(const chr_target, const socket_helper)
\brief
*/
native chr_helpStuff (const chr_target, const socket_helper);

/*!
\author Xanathar
\fn chr_action(const chr, const action)
\brief
*/
native chr_action (const chr, const action);

/*!
\author Xanathar
\fn chr_checkSkill(const chr, const skill, const min=0, const max=1000, const raise=1)
\brief
*/
native chr_checkSkill(const chr, const skill, const min=0, const max=1000, const raise=1);

/*!
\author Xanathar
\fn chr_unmountHorse(const chr)
\brief
*/
native chr_unmountHorse(const chr);

/*!
\author Xanathar
\fn chr_mountHorse(const chr, const horse_chr)
\brief
*/
native chr_mountHorse(const chr, const horse_chr);

/*!
\author Xanathar
\fn chr_resurrect(const chr)
\brief
*/
native chr_resurrect(const chr);

/*!
\author Sparhawk
\fn chr_getEventHandler(const chr, const event, handler[])
\param chr:	character serial
\param event:	character event identifier (EVENT_CHR_ON*)
\brief Returns name of small function bound to the specified event into handler
*/
native chr_getEventHandler(const chr, const event, handler[]);

/*!
\author Xanathar
\fn chr_setEventHandler(const chr, const event, const evtype, const format[], ...)
\param chr:	character serial
\param event:	character event identifier (EVENT_CHR_ON*)
\param evtype:	sets dynamic or static event type (EVENTTYPE_STATIC or EVENTTYPE_DYNAMIC). Static events will be saved in worldfile.
\param format:	Name of small function to bind to the event
\brief Binds a small function to a character event
*/
native chr_setEventHandler(const chr, const event, const evtype, const format[], ...);

/*!
\author Xanathar
\fn chr_delEventHandler(const chr, const event)
\param chr:	character serial
\param event:	character event identifier (EVENT_CHR_ON*)
\brief Unbinds link between a character event and a small function
*/
native chr_delEventHandler(const chr, const event);

/*!
\author Xanathar
\fn chr_sound(const chr, const soundfx)
\brief
*/
native chr_sound(const chr, const soundfx);

/*!
\author Xanathar
\fn chr_distance(const chr1, const chr2)
\brief
*/
native chr_distance(const chr1, const chr2);

/*!
\author Luxor
\fn chr_npcAttack(const attacker, const target)
\brief
*/
native chr_npcAttack(const attacker, const target);

/*!
\author Luxor
\fn chr_update(const chr)
\brief
*/
native chr_update(const chr);

/*!
\author Luxor
\fn chr_npcRelease(const chr)
\brief
*/
native chr_npcRelease(const chr);

/*!
\author Luxor
\fn chr_owns(const chr1, const chr2)
\brief
*/
native chr_owns(const chr1, const chr2);

/*!
\author Sparhawk
\fn chr_speech(const function, const chr = -1, const npc, const text[], const antispam = 1)
\brief
*/
native chr_speech(const function, const chr = -1, const npc, const text[], const antispam = 1);

/*!
\author Luxor
\fn chr_teleport(const chr)
\brief
*/
native chr_teleport(const chr);

/*!
\author Luxor
\fn chr_lineOfSight(const s, const x1, const y1, const z1, const x2, const y2, const z2, const checkfor)
\brief
*/
native chr_lineOfSight(const s, const x1, const y1, const z1, const x2, const y2, const z2, const checkfor);

/*!
\author Luxor
\fn chr_poison(const chr, const poisontype, const secs = -1)
\brief
*/
native chr_poison(const chr, const poisontype, const secs = -1);

/*!
\author Luxor
\fn chr_hide(const chr, const hidden)
\brief
*/
native chr_hide(const chr, const hidden);

/*!
\author Luxor
\fn chr_applyDamage(const chr, const damage, const damagetype, const stattobedamaged)
\brief
*/
native chr_applyDamage(const chr, const damage, const damagetype, const stattobedamaged);

/*!
\author Luxor
\fn chr_setRandomName(const chr, const namelist[])
\brief
*/
native chr_setRandomName(const chr, const namelist[]);

/*!
\author Sparhawk
\fn (const showToWhom, const showWhom, const msg[], const color = 0x0481)
\brief
*/
native chr_showMessage(const showToWhom, const showWhom, const msg[], const color = 0x0481);

/*!
\author Sparhawk
\fn chr_getGuildType(const chr)
\brief
*/
native chr_getGuildType( const chr );

/*!
\author Sparhawk
\fn chr_setGuildType(const chr, const type)
\brief
*/
native chr_setGuildType( const chr, const type );

/*!
\author Sparhawk
\fn chr_isGuildTraitor(const chr)
\brief
*/
native chr_isGuildTraitor( const chr );

/*!
\author Sparhawk
\fn chr_setGuildTraitor(const chr, const traitor = 1)
\brief
*/
native chr_setGuildTraitor( const chr, const traitor = 1 );

/*!
\author Sparhawk
\fn chr_hasGuildToggle(const chr)
\brief
*/
native chr_hasGuildToggle( const chr );

/*!
\author Sparhawk
\fn chr_setGuildToggle(const chr, const toggle = 1)
\brief
*/
native chr_setGuildToggle( const chr, const toggle = 1 );

/*!
\author Sparhawk
\fn chr_getGuildFealty(const chr)
\brief
*/
native chr_getGuildFealty( const chr );

/*!
\author Sparhawk
\fn chr_setGuildFealty(const chr, const fealty)
\brief
*/
native chr_setGuildFealty( const chr, const fealty );

/*!
\author Sparhawk
\fn chr_getGuildNumber(const chr)
\brief
*/
native chr_getGuildNumber( const chr );

/*!
\author Sparhawk
\fn chr_setGuildNumber(const chr)
\brief
*/
native chr_setGuildNumber( const chr, const number );

/*!
\author Sparhawk
\fn chr_getGuildTitle(const chr, title[])
\brief
*/
native chr_getGuildTitle( const chr, title[] );

/*!
\author Sparhawk
\fn chr_setGuildTitle(const chr, const title[])
\brief
*/
native chr_setGuildTitle( const chr, const title[] );

/*!
\author Sparhawk
\fn chr_getCreationDay(const chr)
\brief
*/
native chr_getCreationDay( const chr );

/*!
\author Sparhawk
\fn chr_setCreationDay(const chr, const day)
\brief
*/
native chr_setCreationDay( const chr, const day );

/*!
\author Luxor
\fn chr_morph(const chr, const bodyid, const skincolor, const hairstyle, const haircolor, const beardstyle, const beardcolor, const backup, const format[], ...)
\brief
*/
native chr_morph( const chr, const bodyid, const skincolor, const hairstyle, const haircolor, const beardstyle, const beardcolor, const backup, const format[], ... );

/*!
\author Luxor
\fn chr_unmorph(const chr)
\brief
*/
native chr_unmorph( const chr );

/*!
\author Keldan
\fn chr_possess(const possessor, const possessed)
\brief made "possessor" character possess "possessed" character. Possessor can't be NPC.
*/
native chr_possess(const possessor, const possessed);

/*!
\author Sparhawk
\fn chr_getLocalVarErr()
\brief Returns result for all operations on character variables
\brief Returned value is one of VAR_ERROR_NONE, VAR_ERROR_UNKNOWN_VAR, VAR_ERROR_DUPLICATE_VAR, VAR_ERROR_WRONG_TYPE, VAR_ERROR_ACCESS_DENIED
*/
native chr_getLocalVarErr();

/*!
\author Sparhawk
\fn chr_isaLocalVar(const chr, const var, const type = 0)
\param chr:	character serial
\param var:	variable identifier
\param type:	type of variable (VAR_TYPE_ANY, VAR_TYPE_INTEGER, VAR_TYPE_STRING )
\brief Returns true when variable exists for character. Can also be used to check wether variable is of a specific type
*/
native chr_isaLocalVar( const chr, const var, const type = 0 );

/*!
\author Sparhawk
\fn chr_sizeofLocalVar( const serial, const var, const index = -1 )
\brief Returns length of a local variable, number of elements in a vector, or length of variable in a vector
*/
native chr_sizeofLocalVar( const serial, const var, const index = -1 );

/*!
\author Sparhawk
\fn chr_delLocalVar(const chr, const var, const type = 0)
\param chr:	character serial
\param var:	variable identifier
\param type:	type of variable (VAR_TYPE_ANY, VAR_TYPE_INTEGER, VAR_TYPE_STRING )
\brief Deletes character variable. When type is not VAR_TYPE_ANY variable is only deleted if of same type as specified.
*/
native chr_delLocalVar( const chr, const var, const type = 0 );

/*!
\author Sparhawk
\fn chr_addLocalIntVar(const chr, const var, const value = 0)
\param chr:	character serial
\param var:	variable identifier
\param value:	initial value
\brief Adds a new integer variable to the character
*/
native chr_addLocalIntVar( const chr, const var, const value = 0 );

/*!
\author Sparhawk
\fn chr_getLocalIntVar(const chr, const var)
\param chr:	character serial
\param var:	variable identifier
\brief Get value of specified integer variable from character
*/
native chr_getLocalIntVar( const chr, const var );

/*!
\author Sparhawk
\fn chr_setLocalIntVar(const chr, const var, const value = 0)
\param chr:	character serial
\param var:	variable identifier
\param value:	new value
\brief Set the value of specified integer variable for the character
*/
native chr_setLocalIntVar( const chr, const var, const value = 0 );

/*!
\author Sparhawk
\fn chr_addLocalIntVec(const chr, const var, const size = 1, const value = 0)
\param chr:	character serial
\param var:	variable identifier
\param size	number of array elements
\param value:	initial value
\brief Adds a new integer variable array to the character
*/
native chr_addLocalIntVec( const chr, const var, const size = 1, const value = 0 );

/*!
\author Sparhawk
\fn chr_getLocalIntVec(const chr, const var, const index = 0)
\param chr:	character serial
\param var:	variable identifier
\param index:	0 based index into array
\brief Get value of specified integer variable from character
*/
native chr_getLocalIntVec( const chr, const var, const index = 0);

/*!
\author Sparhawk
\fn chr_setLocalIntVec(const chr, const var, const index = 0, const value = 0)
\param chr:	character serial
\param var:	variable identifier
\param index:	0 based index into array
\param value:	new value
\brief Set the value of specified integer variable for the character
*/
native chr_setLocalIntVec( const chr, const var, const index = 0, const value = 0 );

/*!
\author Sparhawk
\fn chr_addLocalStrVar(const chr, const var, const value[] = "")
\param chr:	character serial
\param var:	variable identifier
\param value:	initial value
\brief Adds a new string variable to the character
*/
native chr_addLocalStrVar( const chr, const var, const value[] = "" );

/*!
\author Sparhawk
\fn chr_getLocalStrVar(const chr, const var, value[])
\param chr:	character serial
\param var:	variable identifier
\brief Get value of specified string variable from character into value.
*/
native chr_getLocalStrVar( const chr, const var, value[] );

/*!
\author Sparhawk
\fn chr_setLocalStrVar(const chr, const var, const value[] = "")
\param chr:	character serial
\param var:	variable identifier
\param value:	new value
\brief Set the value of specified string variable for the character
*/
native chr_setLocalStrVar( const chr, const var, const value[] = "" );

/*!
\author Sparhawk
\fn chr_countLocalVar(const chr)
\param chr:	character serial
\return number of variables defined
\brief Count the number of local variables defined for specified character
*/
native chr_countLocalVar( const chr );

/*!
\author Sparhawk
\fn chr_firstLocalVar(const chr)
\param chr:	character serial
\return first defined local variable or INVALID
\brief get id of first defined local variable
*/
native chr_firstLocalVar( const chr );

/*!
\author Sparhawk
\fn chr_nextLocalVar(const chr, const previous)
\param chr:	character serial
\param previous: variable id of previous variable
\return next defined local variable or INVALID
\brief get id of next defined local variable
*/
native chr_nextLocalVar( const chr, const previous );

/*!
\author Luxor
\fn chr_skillMakeMenu(const chr, const makeMenu, const skill)
\brief
*/
native chr_skillMakeMenu(const chr, const makeMenu, const skill);


/*!
\author Luxor
\fn chr_isOnline(const chr)
\brief
*/
native chr_isOnline(const chr);


/*!
\author Luxor
\fn chr_isFrozen(const chr)
\brief
*/
native chr_isFrozen(const chr);


/*!
\author Luxor
\fn chr_doCombatAction(const chr)
\brief
*/
native chr_doCombatAction(const chr);

